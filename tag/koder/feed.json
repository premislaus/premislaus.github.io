{
    "version": "https://jsonfeed.org/version/1",
    "title": "τέχνη • All posts by \"koder\" tag",
    "description": "",
    "home_page_url": "https://premislaus.github.io",
    "items": [
        {
            "id": "https://premislaus.github.io/30/07/2020/Koder-0-5-3/",
            "url": "https://premislaus.github.io/30/07/2020/Koder-0-5-3/",
            "title": "Koder 0.5.3",
            "date_published": "2020-07-30T10:42:02.000Z",
            "content_html": "<h3 id=\"Koder\"><a class=\"header-anchor\" href=\"#Koder\">¶</a>Koder</h3>\n<p><a href=\"https://github.com/KapiX/Koder\"><strong>Koder</strong></a>, autorstwa <a href=\"https://github.com/KapiX\"><strong>KapiXa</strong></a>, stanowi natywny edytor programistyczny dla <a href=\"/18/07/2020/Haiku-R1-beta2-na-produkcji/\"><strong>systemu operacyjnego Haiku</strong></a>, który został oparty o <a href=\"https://www.scintilla.org/\"><strong>bibliotekę Scintilla</strong></a>, jaka dostarcza <a href=\"http://m.in\">m.in</a>. wszelkie niezbędne formatowania programistom, w celu zachowania ich produktywności na właściwym poziomie. Koder w połączeniu z funkcją Haiku <a href=\"https://www.haiku-os.org/docs/userguide/pl/gui.html#stack-tile\"><strong>Stack &amp; Tile</strong></a>, staje się nadwyraz potężnym narzędziem, dlatego że mogę przypinać okna bokami lub grupować je w karty. Toteż zapomniałem o istnieniu menedżerów okien wdrażających kafelkowe grupowanie okien, <a href=\"https://i3wm.org/\"><strong>w stylu i3</strong></a>, jakie miewają problemy z przedstawieniem okien swobodnych. Niejednokrotnie mam otwartych kilkanaście instancji Kodera, obok emulatora terminala, przeglądarki WWW WebPositive, klienta IRC Vision i pozostałych narzędzi wymaganych przeze mnie w procesie tworzenia. Koder pozostaje stabilny i zaraz po otwarciu <strong>zużywa zaledwie 4,22 MiB pamięci RAM</strong>. Właśnie ta lekkość i wykorzystanie natywnego API, a także prawidłowe robienie jednej rzeczy, wydają się typowe dla polskiej myśli programistycznej <strong>(Kacper jest naszym rodakiem)</strong>.</p>\n<p><img src=\"/30/07/2020/Koder-0-5-3/koder_dark.png\" alt=\"Główne okno Kodera wraz ze stylem dark, przez co wygląda nowocześnie.\"></p>\n<a id=\"more\"></a>\n<h3 id=\"Estetyka\"><a class=\"header-anchor\" href=\"#Estetyka\">¶</a>Estetyka</h3>\n<p>Jestem wyjątkowo wdzięczny człowiekowi który utworzył styl kolorystyczny <strong>purpleriot</strong> dla Kodera, jest on dla mnie czytelny, jak i cieszy oko estetycznie dobraną paletą barw. Przynajmniej jeśli chodzi o Markdown. Z ciekawości zmieniłem kolorowanie składni z Markdown na C++ i zacząłem wpisywać <em>#include</em> i okazało się ono ledwie widoczne w tymże układzie barw. Po kilku eksperymentach zdecydowałem się jednak na układ dark. Ponadto Koder wykorzystuje płaskie ikony wektorowe dla paska narzędzi, <a href=\"https://rawgit.com/HaikuArchives/ZumisIcons/master/myhaiku/\"><strong>autorstwa zuMiego</strong></a>.</p>\n<p><img src=\"/30/07/2020/Koder-0-5-3/koder_purpleriot.png\" alt=\"Główne okno Kodera, wraz ze stylem purpleriot.\"></p>\n<p>Moje dotychczasowe doświadczenie z edytorami programistycznymi wiąże się, przeważnie, z modyfikowaniem gier na Windowsie, przy użyciu <strong>Notepad++</strong>. Na Linuksie zaś wykorzystuję na ogół <strong>vi</strong> bowiem bywa, iż muszę dostosować pod siebie skrypty systemowe, choćby wprowadzjąc ścieżki do GRUBa, co wymaga uprawnień administratora (niezalecanych w trybie GUI). Tak to korzystam z <strong>Kate</strong> dostarczanego przez KDE, kiedy tworzę pliki sh dla gier korzystających z WINE i pragnę użyć DRI_PRIME lub wymusić obsługę wyższej wersji OpenGL.</p>\n<p><img src=\"/30/07/2020/Koder-0-5-3/koder_zakladki.png\" alt=\"Zakładki w Koderze. Ustawić je można klikając obok numeru wiersza.\"></p>\n<p>Koder posiada <strong>opcję zakładek</strong>. Za ich sprawą możemy zaznaczyć ważką partię kodu i przenieść się do niej skrótem klawiszowym. Oczywiście ustawimy w Koderze <strong>zawijanie linii</strong>, <strong>podkreślanie białych znaków</strong> czy też <strong>moment w jakim kończy się linia</strong>. Jest możliwe <strong>wyświetlenie pionowej linii sugerującej, że właśnie osiągnęliśmy limit 80 znaków</strong> na wiersz bądź ich uprzednio zdefiniowaną przez użytkownika wartość. Koder cechuje też zdolność <strong>odnalezienia danego tekstu i zastąpienią go nowym</strong>, <strong>obcięcia wiodącego białego znaku</strong> czy też <strong>zamiany tabulacji na spacje</strong>.</p>\n<p>Uważam, że Koder jest <strong>conajmniej poprawnym edytorem tekstu</strong>, <strong>działa szybko</strong> i <strong>stabilnie</strong>. Jest także <strong>przykładem tego, jak tworzyć oprogramowanie na Haiku</strong> i <strong>dowodem na to, że same porty nie są rozwiązaniem bolączek trapiących Haiku</strong>, na polu dostępnego oprogramowania. <strong>Tylko natywne API</strong> zrzuci z nas brzemię zależności ważących nieraz setki megabajtów albo wyczuwalnego braku konsystencji w GUI. <strong>Przede wszystkim natywne oprogramowanie działa zauważalnie szybciej.</strong> Wyobrażam sobie, że w przyszłości Koder nabierze bardziej zaawansowanych funkcji, dzięki mocy otwartego kodu i będzie powodem dla niektórych, aby posiadać instalację Haiku.</p>\n<h3 id=\"Niuanse\"><a class=\"header-anchor\" href=\"#Niuanse\">¶</a>Niuanse</h3>\n<p>Do wad Kodera zaliczyłbym fakt <strong>nie obsługiwania przez niego sprawdzania pisowni</strong>, mimo że w HaikuDepot odnajdziemy programy do sprawdzania pisowani, choćby <strong>MySpell</strong> czy <strong>GNU Aspell</strong>. Jest to dla mnie pożądana funkcja, w wielu przypadkach mógłbym zrezygnować z procesora tekstu Writer, z pakietu biurowego LibreOffice. <strong>Koder nie wprowadza także automatycznego uzupełniania kodu</strong> i póki co <strong>nie zapewnia też wykonywania komend</strong>. Chętnie połączyłbym owe z generowaniem stron w Hexo i otwarciem ich podglądu w WebPositive, na localhoście. Niemniej mogę skorzystać ze skrótu klawiszowego <strong>lewy ALT + D</strong>, aby skopiować do nowej linii zawartość poprzedniego wiersza. Jest to przydatne, gdy wprowadzam np. kolejne linki lub obrazki. Przydałoby się też zliczanie znaków, sprzed i po wprowadzeniu znaczników.</p>\n<h3 id=\"Futurologia\"><a class=\"header-anchor\" href=\"#Futurologia\">¶</a>Futurologia</h3>\n<p>Ciekawe byłoby rozwinięcie Kodera do rodzaju „procesora tekstu”. Za pomocą LaTeXa lub jakiegoś prostego języka znaczników opisywalibyśmy dokument (byleby posiadał justowanie i interlinię), jego szkielet i treść, następnie otrzymywali podgląd na żywo w oknie bocznym, aby skompilować go do PDF, podpisanego kluczem PGP. Być może w przyszłości autor lub ktoś ze społeczności Haiku wprowadzi do Kodera system pluginów, jaki umożliwiłby powyższe działanie. <strong>Koder nie jest i nie będzie IDE</strong>, ale nie zmienia to faktu, że można go połączyć z innymi programami bowiem <strong>Koder i Haiku uosabiają w sobie ducha UNIXa</strong>.</p>\n<p><img src=\"/30/07/2020/Koder-0-5-3/koder_about.png\" alt=\"Lista autorów i podziękowań dowodzi znaczenia Kodera w ekosystemie programowym Haiku.\"></p>\n<p>Kod źródłowy Kodera jest dystrybuowany <a href=\"https://pl.wikipedia.org/wiki/Licencja_MIT\">na licencji MIT</a>.</p>\n",
            "tags": [
                "Haiku",
                "UX",
                "Programowanie",
                "Koder",
                "Scintilla"
            ]
        }
    ]
}